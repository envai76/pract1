---
title: "practicum_1"
output: html_document
author:"Narges Yarahmadi Gharaei"
date: "2023-05-19"
---

```{r}
install.packages("CatEncoders")

```

loading the libraries

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(CatEncoders)
library(readr)          # Data Input
library(tidymodels)     # Data Manipulation
library(lubridate)      # Data Manupulation
library(dplyr)          # Data Manipulation
library(reshape2)       # Data Manipulation
library(caTools)        # Data Manipulation
library(corrplot)       # Data Visualisation
library(ggplot2)        # Data Visualization
library(viridis)        # Data Visualization
library(ggthemes)       # Data Visualization
library(pROC)           # Metrics
library(caret)          # Machine Learning
library(xgboost)        # xgboost model
```

***Understanding the data***

**1.**showing the data dictionary :

```{r}
data <- read.delim(file = "data_dic.txt" ,  header = TRUE, sep = "\t", dec = ".")

print(data)
```

**2.** Maybe the patient

**3.** for example what type of medical appointment does each AppointmentID refer to?, how far is the patient address from the vitoria? , if the patient has any body to assist him or her?

***Data Parsing and Cleaning***

**4.** we can download data separately and import it from the saved address (line 41) or download it by the command in line 42( reproducibility)

```{r}
raw.data <- readr::read_csv('https://maguire-lab.github.io/health_data_science_research_2023/static_files/practicals/lab1_data/2016_05v2_VitoriaAppointmentData.csv')

print(raw.data)
```

checking if anybody is elder than 100 years or no?

```{r}
age_under_110 <- raw.data %>% filter(Age > 110)
print(age_under_110)
age_under_110 <- age_under_110[!duplicated( age_under_110[c('PatientID')]),]
print(age_under_110)

```

we can see that there are 2 person elder than 110.

***Exploratory Data Analysis***

**5.** if the data contains a person with age under 0, so we can say that's impossible.

```{r}
raw.data %>% filter(Age<0)

```

as you can see we have one person under 0 age, so we should drop it from our data set. so I'm going to filter people with less than 0 age. in the below cell I'm going to check the data dimension before and after the filtering to see it has affected the data set or not.

```{r}
print(dim(raw.data))
raw.data <- raw.data %>% filter(Age >= 0)
print(dim(raw.data))
```

as its obvious just that one person is deleted.

so lets check if we have anybody with age 0 ?

```{r}
age_0 <- raw.data %>% filter(Age == 0)

age_0 <- age_0[!duplicated( age_0[c('PatientID')]),]
print(dim(age_0))

```

so we see that we have 2082 users with age 0 in our data set and i think that may happen for example newborn babies. so I'm not going to drop them.

but we are going to do some Exploratory on it. for example we wouldn't expect any of newborns to be diagnosed with Diabetes, Alcohol Use Disorder, and Hypertension. so we should check it in the data set too.

```{r}
raw.data %>% filter(Age == 0) %>% select(Hypertension, Diabetes, AlcoholUseDisorder) %>% unique()

```

We can also explore things like how many different neighborhoods are there and how many appoints are from each?

```{r}
count(raw.data, Neighbourhood, sort = TRUE)

```

**6 What is the maximum number of appointments from the same patient?**

as i have deleted the anomaly duplicates, so my answer may differ from yours so by the way it's 88. but i can rerun it and generate it's solution for you by the real data before doing this operation.

```{r}
count(raw.data, PatientID, sort = TRUE)

```

i faced to a concern. and that's it, as we don't know whats the appointment for, if a person has more than one appointment in a day, it's a kind of duplicated data and i think they must be dropped out. so i would print the maximum appointment of a person also after deleting duplicates.

```{r}
raw.data <- raw.data [!duplicated( raw.data[c('PatientID','ScheduledDate')]),]

print(dim(raw.data))
count(raw.data, PatientID, sort = TRUE)

```

first let's replace non numeric values with some numeric values. so i would replacements would be as follow: for gender encoding:

```{r}
labs = LabelEncoder.fit(raw.data$Gender)

#convert labels to numeric values
raw.data$Gender = transform(labs, raw.data$Gender)
```

for Neighbourhood encoding:

```{r}
labs = LabelEncoder.fit(raw.data$Neighbourhood)

#convert labels to numeric values
raw.data$Neighbourhood = transform(labs, raw.data$Neighbourhood)
```

for NoShow encoding:

```{r}
labs = LabelEncoder.fit(raw.data$NoShow)

#convert labels to numeric values
raw.data$NoShow = transform(labs, raw.data$NoShow)
```

and after all checking the changes.

```{r}
print(raw.data)
```

Let's explore the correlation between variables:

```{r}
# let's define a plotting function
corplot = function(df){
  
  cor_matrix_raw <- round(cor(df),2)
  cor_matrix <- melt(cor_matrix_raw)
  
  
  #Get triangle of the correlation matrix
  #Lower Triangle
  get_lower_tri<-function(cor_matrix_raw){
    cor_matrix_raw[upper.tri(cor_matrix_raw)] <- NA
    return(cor_matrix_raw)
  }
  
  # Upper Triangle
  get_upper_tri <- function(cor_matrix_raw){
    cor_matrix_raw[lower.tri(cor_matrix_raw)]<- NA
    return(cor_matrix_raw)
  }
  
  upper_tri <- get_upper_tri(cor_matrix_raw)
  
  # Melt the correlation matrix
  cor_matrix <- melt(upper_tri, na.rm = TRUE)
  
  # Heatmap Plot
  cor_graph <- ggplot(data = cor_matrix, aes(Var2, Var1, fill = value))+
    geom_tile(color = "white")+
    scale_fill_gradient2(low = "darkorchid", high = "orangered", mid = "grey50", 
                         midpoint = 0, limit = c(-1,1), space = "Lab", 
                         name="Pearson\nCorrelation") +
    theme_minimal()+ 
    theme(axis.text.x = element_text(angle = 45, vjust = 1, 
                                     size = 8, hjust = 1))+
    coord_fixed()+ geom_text(aes(Var2, Var1, label = value), color = "black", size = 2) +
    theme(
      axis.title.x = element_blank(),
      axis.title.y = element_blank(),
      panel.grid.major = element_blank(),
      panel.border = element_blank(),
      panel.background = element_blank(),
      axis.ticks = element_blank())+
      ggtitle("Correlation Heatmap")+
      theme(plot.title = element_text(hjust = 0.5))
  
  cor_graph
}

numeric.data = mutate_all(raw.data, function(x) as.numeric(x))

# Plot Correlation Heatmap
corplot(numeric.data)

```

**7.** column SMSReceived is most related one to NoShow.

**8.** i would say the correlation by decending order as follow:

1.PatientID and AppointmentID are most related columns as their value in correlation heat map is equal to 0.65.

2.then AppointmentID and AppointmentDate are most correlated ones. also ScheduledDate and AppointmentDate are correlated with same corelation values(0.61).

3.third rank would be for Hypertension and Age with correlation value 0.5.
