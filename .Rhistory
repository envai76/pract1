knitr::opts_chunk$set(echo = TRUE)
library(CatEncoders)
library(readr)          # Data Input
library(tidymodels)     # Data Manipulation
library(lubridate)      # Data Manupulation
library(dplyr)          # Data Manipulation
library(reshape2)       # Data Manipulation
library(caTools)        # Data Manipulation
library(corrplot)       # Data Visualisation
library(ggplot2)        # Data Visualization
library(viridis)        # Data Visualization
library(ggthemes)       # Data Visualization
library(pROC)           # Metrics
library(caret)          # Machine Learning
library(xgboost)        # xgboost model
xgb.pred <- predict(rf_model, newdata=test)
tuneGrid <- expand.grid(.mtry = c(1 : 10))
ctrl <- trainControl(method = "cv",
number = 2,
search = 'grid',
classProbs = TRUE,
savePredictions = "final",
index = cv_folds,
summaryFunction = twoClassSummary)
### REMOVE SUBSAMPLING FOR FINAL MODEL
data.prep <- raw.data %>% select(-AppointmentID, -PatientID) #%>% sample_n(10000)
knitr::opts_chunk$set(echo = TRUE)
library(CatEncoders)
library(readr)          # Data Input
library(tidymodels)     # Data Manipulation
library(lubridate)      # Data Manupulation
library(dplyr)          # Data Manipulation
library(reshape2)       # Data Manipulation
library(caTools)        # Data Manipulation
library(corrplot)       # Data Visualisation
library(ggplot2)        # Data Visualization
library(viridis)        # Data Visualization
library(ggthemes)       # Data Visualization
library(pROC)           # Metrics
library(caret)          # Machine Learning
library(xgboost)        # xgboost model
raw.data <- readr::read_csv('https://maguire-lab.github.io/health_data_science_research_2023/static_files/practicals/lab1_data/2016_05v2_VitoriaAppointmentData.csv')
print(raw.data)
raw.data <- readr::read_csv('https://maguire-lab.github.io/health_data_science_research_2023/static_files/practicals/lab1_data/2016_05v2_VitoriaAppointmentData.csv')
print(raw.data)
data <- read.delim(file = "data_dic.txt" ,  header = TRUE, sep = "\t", dec = ".")
knitr::opts_chunk$set(echo = TRUE)
library(CatEncoders)
library(readr)          # Data Input
library(tidymodels)     # Data Manipulation
library(lubridate)      # Data Manupulation
library(dplyr)          # Data Manipulation
library(reshape2)       # Data Manipulation
library(caTools)        # Data Manipulation
library(corrplot)       # Data Visualisation
library(ggplot2)        # Data Visualization
library(viridis)        # Data Visualization
library(ggthemes)       # Data Visualization
library(pROC)           # Metrics
library(caret)          # Machine Learning
library(xgboost)        # xgboost model
data <- read.delim(file = "data_dic.txt" ,  header = TRUE, sep = "\t", dec = ".")
knitr::opts_chunk$set(echo = TRUE)
library(CatEncoders)
library(readr)          # Data Input
library(tidymodels)     # Data Manipulation
library(lubridate)      # Data Manupulation
library(dplyr)          # Data Manipulation
library(reshape2)       # Data Manipulation
library(caTools)        # Data Manipulation
library(corrplot)       # Data Visualisation
library(ggplot2)        # Data Visualization
library(viridis)        # Data Visualization
library(ggthemes)       # Data Visualization
library(pROC)           # Metrics
library(caret)          # Machine Learning
library(xgboost)        # xgboost model
data <- read.delim(file = "data_dic.txt" ,  header = TRUE, sep = "\t", dec = ".")
raw.data <- readr::read_csv('https://maguire-lab.github.io/health_data_science_research_2023/static_files/practicals/lab1_data/2016_05v2_VitoriaAppointmentData.csv')
print(raw.data)
age_under_110 <- raw.data %>% filter(Age > 110)
print(age_under_110)
age_under_110 <- age_under_110[!duplicated( age_under_110[c('PatientID')]),]
print(age_under_110)
### REMOVE SUBSAMPLING FOR FINAL MODEL
data.prep <- raw.data %>% select(-AppointmentID, -PatientID) #%>% sample_n(10000)
set.seed(423)
cv_folds <- createFolds(data.prep$NoShow, k = 5, returnTrain = TRUE)
tuneGrid <- expand.grid(.mtry = c(1 : 10))
ctrl <- trainControl(method = "cv",
number = 2,
search = 'grid',
classProbs = TRUE,
savePredictions = "final",
index = cv_folds,
summaryFunction = twoClassSummary)
ntrees <- c(500, 1000)
nodesize <- c(1, 5)
params <- expand.grid(ntrees = ntrees,
nodesize = nodesize)
store_maxnode <- vector("list", nrow(params))
for(i in 1:nrow(params)){
nodesize <- params[i,2]
ntree <- params[i,1]
set.seed(65)
rf_model <- train(NoShow~.,
data=data.prep,
method = "rf",
importance=TRUE,
metric = "ROC",
tuneGrid = tuneGrid,
trControl = ctrl,
ntree = ntree,
nodesize = nodesize)
store_maxnode[[i]] <- rf_model
}
### REMOVE SUBSAMPLING FOR FINAL MODEL
data.prep <- raw.data %>% select(-AppointmentID, -PatientID) #%>% sample_n(10000)
set.seed(42)
data.split <- initial_split(data.prep, prop = 0.7)
train  <- training(data.split)
test <- testing(data.split)
set.seed(123)
model <- train(
medv ~., data = train.data, method = "rf",
trControl = trainControl("cv", number = 10)
)
set.seed(123)
model <- train(
medv ~., data = train, method = "rf",
trControl = trainControl("cv", number = 10)
)
set.seed(123)
model <- train(
NoShow ~., data = train, method = "rf",
trControl = trainControl("cv", number = 10)
)
library(reshape2)       # Data Manipulation
library(caTools)        # Data Manipulation
data <- read.delim(file = "data_dic.txt" ,  header = TRUE, sep = "\t", dec = ".")
knitr::opts_chunk$set(echo = TRUE)
library(CatEncoders)
library(readr)          # Data Input
library(tidymodels)     # Data Manipulation
library(lubridate)      # Data Manupulation
library(dplyr)          # Data Manipulation
library(reshape2)       # Data Manipulation
library(caTools)        # Data Manipulation
library(corrplot)       # Data Visualisation
library(ggplot2)        # Data Visualization
library(viridis)        # Data Visualization
library(ggthemes)       # Data Visualization
library(pROC)           # Metrics
library(caret)          # Machine Learning
library(xgboost)        # xgboost model
data <- read.delim(file = "data_dic.txt" ,  header = TRUE, sep = "\t", dec = ".")
data <- read.delim(file = "./data_dic.txt" ,  header = TRUE, sep = "\t", dec = ".")
data <- read.delim(file = "C:\Users\Narges\Documents\practical_1\data_dic.txt" ,  header = TRUE, sep = "\t", dec = ".")
data <- read.delim(file = "C:/Users/Narges/Documents/practical_1/data_dic.txt" ,  header = TRUE, sep = "\t", dec = ".")
print(data)
raw.data <- readr::read_csv('https://maguire-lab.github.io/health_data_science_research_2023/static_files/practicals/lab1_data/2016_05v2_VitoriaAppointmentData.csv')
print(raw.data)
### REMOVE SUBSAMPLING FOR FINAL MODEL
data.prep <- raw.data %>% select(-AppointmentID, -PatientID) #%>% sample_n(10000)
set.seed(42)
data.split <- initial_split(data.prep, prop = 0.7)
train  <- training(data.split)
test <- testing(data.split)
set.seed(123)
model <- train(
NoShow ~., data = train, method = "rf",
trControl = trainControl("cv", number = 10)
)
set.seed(123)
model <- train(
NoShow ~., data = train, method = "rf")
### REMOVE SUBSAMPLING FOR FINAL MODEL
data.prep <- raw.data %>% select(-AppointmentID, -PatientID) %>% sample_n(1000)
set.seed(42)
data.split <- initial_split(data.prep, prop = 0.7)
train  <- training(data.split)
test <- testing(data.split)
dim(train)
dim(test)
set.seed(123)
model <- train(
NoShow ~., data = train, method = "rf")
# Best tuning parameter mtry
model$bestTune
# Make predictions on the test data
predictions <- model %>% predict(test.data)
# Make predictions on the test data
predictions <- model %>% predict(test)
# Best tuning parameter mtry
model$bestTune
# Make predictions on the test data
predictions <- model %>% predict(test)
levels(test)
levels(test$NoShow)
levels(test$NoShow)
test$NoShow<- as.factor(test$NoShow)
levels(test$NoShow)
# Best tuning parameter mtry
model$bestTune
# Make predictions on the test data
predictions <- model %>% predict(test)
levels(test$Neighbourhood)
test$Neighbourhood<- as.factor(test$Neighbourhood)
levels(test$Neighbourhood)
# Best tuning parameter mtry
model$bestTune
# Make predictions on the test data
predictions <- model %>% predict(test)
levels(train$Neighbourhood))
levels(train$Neighbourhood)
train$Neighbourhood<- as.factor(train$Neighbourhood)
train$Neighbourhood<- as.factor(train$Neighbourhood)
levels(train$Neighbourhood)
test <- subset(test,Neighbourhood !=  'HORTO')
test$Neighbourhood<- as.factor(test$Neighbourhood)
levels(test$Neighbourhood)
test <- subset(test,Neighbourhood !=  "HORTO")
test <- subset(test,Neighbourhood !=  "HORTO")
test$Neighbourhood<- as.factor(test$Neighbourhood)
levels(test$Neighbourhood)
plot(predictions)
# Best tuning parameter mtry
model$bestTune
# Make predictions on the test data
predictions <- model %>% predict(test)
plot(predictions)
head(predictions)
# Compute the average prediction error RMSE
RMSE(predictions, test.data$medv)
# Best tuning parameter mtry
model$bestTune
# Make predictions on the test data
predictions <- model %>% predict(test)
plot(predictions)
head(predictions)
# Compute the average prediction error RMSE
RMSE(predictions, test$medv)
# Best tuning parameter mtry
model$bestTune
# Make predictions on the test data
predictions <- model %>% predict(test)
plot(predictions)
head(predictions)
# Compute the average prediction error RMSE
RMSE(predictions, test$NoShow)
test$NoShow
# Compute the average prediction error RMSE
confusionMatrix(predictions, test$NoShow, positive="Yes")
knitr::opts_chunk$set(echo = TRUE)
library(CatEncoders)
library(readr)          # Data Input
library(tidymodels)     # Data Manipulation
library(lubridate)      # Data Manupulation
library(dplyr)          # Data Manipulation
library(reshape2)       # Data Manipulation
library(caTools)        # Data Manipulation
library(corrplot)       # Data Visualisation
library(ggplot2)        # Data Visualization
library(viridis)        # Data Visualization
library(ggthemes)       # Data Visualization
library(pROC)           # Metrics
library(caret)          # Machine Learning
library(xgboost)        # xgboost model
raw.data <- readr::read_csv('https://maguire-lab.github.io/health_data_science_research_2023/static_files/practicals/lab1_data/2016_05v2_VitoriaAppointmentData.csv')
print(raw.data)
age_under_110 <- raw.data %>% filter(Age > 110)
print(age_under_110)
age_under_110 <- age_under_110[!duplicated( age_under_110[c('PatientID')]),]
print(age_under_110)
raw.data %>% filter(Age<0)
print(dim(raw.data))
raw.data <- raw.data %>% filter(Age >= 0)
print(dim(raw.data))
age_0 <- raw.data %>% filter(Age == 0)
age_0 <- age_0[!duplicated( age_0[c('PatientID')]),]
print(dim(age_0))
### REMOVE SUBSAMPLING FOR FINAL MODEL
data.prep <- raw.data %>% select(-AppointmentID, -PatientID) #%>% sample_n(1000)
set.seed(42)
data.split <- initial_split(data.prep, prop = 0.7)
train  <- training(data.split)
test <- testing(data.split)
dim(test)
set.seed(123)
model <- train(
NoShow ~., data = train, method = "rf")
